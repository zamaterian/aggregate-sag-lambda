# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#

defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  build:
    <<: *defaults
    docker:
      # specify the version you desire here
      - image: circleci/clojure:lein-2.7.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
   
    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout
      - run: env
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      # build jar
      - run: lein uberjar

      - run: mkdir -p artifact/target

      - run: echo 'export V=`cat project.clj | head -n 1 | grep -oE "\"(.+)+$" | tr -d \\"\"\\"`' >> $BASH_ENV

      - run: echo "export A=target/aggregate-sag-lambda-$V-standalone.jar" >> $BASH_ENV

      - run: cp $A artifact/target

      - run: cp sam.yaml artifact

      - run: echo "export V=$V;export JAR=$A" > artifact/version

      - persist_to_workspace:
          root: artifact
          paths:
            - sam.yaml
            - version
            - target/*

  packing:
    <<: *defaults
    
    docker:
      - image: wilson208/circleci-awscli # mesosphere/aws-cli

    steps:
      - attach_workspace:
          at: /tmp/artifact

      # build stack
      - run: cat /tmp/artifact/version >> $BASH_ENV
      - run: env
      - run: aws cloudformation package --template-file /tmp/artifact/sam.yaml --s3-prefix "packages/aggregate-sag-lambda-$V" --s3-bucket $bucket_name --output-template-file packaged-template.yaml
      - run: aws s3 cp packaged-template.yaml "s3://$bucket_name/packages/aggregate-sag-lambda-$V.yaml     
      - run: echo 'export EXISTS=`aws s3 ls "s3://$bucket_name/aggregate-sag-lambda-$V"`' >> $BASH_ENV
     
      - run:
          command: |
            if [ -n "$EXISTS" ]; then
              echo "Version exists already"
              exit 1
            fi

     #- run: aws s3 cp packaged-template.yaml "s3://$bucket_name/aggregate-sag-lambda-$V.yaml"

      # deploy stack

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          context: dev
      - packing:
          context: dev
          requires:
            - build
